// tslint:disable
/**
 * u^db
 * This API specification is the base for the u^db (pronounced \"u to the power of db\") project. The goal of u^db is to provide a web app for students to learn dealing with databases. For this, the API backend provides teachers with accounts, where they can upload tasks, and students with a verify endpoint where they can check their solution.  ### Gotchas:  This API spec is not 100% correct, there are a few things that aren\'t correct:  - IDs are not required *only* when creating a new instance. Instead, a new ID is generated on the server and sent back in the response.  - Read access to courses and their contents will not require authentication if you know the ID of the course, so that students don\'t need to authenticate.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "@/api/BaseApi";
import {
    Database,
    DatabaseFromJSON,
    DatabaseToJSON,
} from '../dataModel';

export interface CreateDatabaseRequest {
    database: Database;
}

export interface DeleteDatabaseRequest {
    databaseId: string;
}

export interface GetDatabaseRequest {
    databaseId: string;
}

export interface UpdateDatabaseRequest {
    databaseId: string;
    database: Database;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Creates a new instance of a `Database`.
     * Create a Database
     */
    async createDatabaseRaw(requestParameters: CreateDatabaseRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling createDatabase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.accessToken || this.configuration.apiKey)) {
            const token = this.configuration.accessToken || this.configuration.apiKey;
            const tokenString = typeof token === 'function' ? token("Token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/databases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseToJSON(requestParameters.database),
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     * Creates a new instance of a `Database`.
     * Create a Database
     */
    async createDatabase(requestParameters: CreateDatabaseRequest): Promise<string> {
        const response = await this.createDatabaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an existing `Database`.
     * Delete a Database
     */
    async deleteDatabaseRaw(requestParameters: DeleteDatabaseRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.databaseId === null || requestParameters.databaseId === undefined) {
            throw new runtime.RequiredError('databaseId','Required parameter requestParameters.databaseId was null or undefined when calling deleteDatabase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.accessToken || this.configuration.apiKey)) {
            const token = this.configuration.accessToken || this.configuration.apiKey;
            const tokenString = typeof token === 'function' ? token("Token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/databases/{databaseId}`.replace(`{${"databaseId"}}`, encodeURIComponent(String(requestParameters.databaseId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing `Database`.
     * Delete a Database
     */
    async deleteDatabase(requestParameters: DeleteDatabaseRequest): Promise<void> {
        await this.deleteDatabaseRaw(requestParameters);
    }

    /**
     * Gets the details of a single instance of a `Database`.
     * Get a Database
     */
    async getDatabaseRaw(requestParameters: GetDatabaseRequest): Promise<runtime.ApiResponse<Database>> {
        if (requestParameters.databaseId === null || requestParameters.databaseId === undefined) {
            throw new runtime.RequiredError('databaseId','Required parameter requestParameters.databaseId was null or undefined when calling getDatabase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.accessToken || this.configuration.apiKey)) {
            const token = this.configuration.accessToken || this.configuration.apiKey;
            const tokenString = typeof token === 'function' ? token("Token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/databases/{databaseId}`.replace(`{${"databaseId"}}`, encodeURIComponent(String(requestParameters.databaseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DatabaseFromJSON(jsonValue));
    }

    /**
     * Gets the details of a single instance of a `Database`.
     * Get a Database
     */
    async getDatabase(requestParameters: GetDatabaseRequest): Promise<Database> {
        const response = await this.getDatabaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a list of all `Database` entities.
     * List All Databases
     */
    async getDatabasesRaw(): Promise<runtime.ApiResponse<Array<Database>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.accessToken || this.configuration.apiKey)) {
            const token = this.configuration.accessToken || this.configuration.apiKey;
            const tokenString = typeof token === 'function' ? token("Token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/databases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatabaseFromJSON));
    }

    /**
     * Gets a list of all `Database` entities.
     * List All Databases
     */
    async getDatabases(): Promise<Array<Database>> {
        const response = await this.getDatabasesRaw();
        return await response.value();
    }

    /**
     * Updates an existing `Database`.
     * Update a Database
     */
    async updateDatabaseRaw(requestParameters: UpdateDatabaseRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.databaseId === null || requestParameters.databaseId === undefined) {
            throw new runtime.RequiredError('databaseId','Required parameter requestParameters.databaseId was null or undefined when calling updateDatabase.');
        }

        if (requestParameters.database === null || requestParameters.database === undefined) {
            throw new runtime.RequiredError('database','Required parameter requestParameters.database was null or undefined when calling updateDatabase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.accessToken || this.configuration.apiKey)) {
            const token = this.configuration.accessToken || this.configuration.apiKey;
            const tokenString = typeof token === 'function' ? token("Token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/databases/{databaseId}`.replace(`{${"databaseId"}}`, encodeURIComponent(String(requestParameters.databaseId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DatabaseToJSON(requestParameters.database),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing `Database`.
     * Update a Database
     */
    async updateDatabase(requestParameters: UpdateDatabaseRequest): Promise<void> {
        await this.updateDatabaseRaw(requestParameters);
    }
}
